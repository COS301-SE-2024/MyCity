name: Deploy Serverless APIs

on:
  pull_request:
    types:
      - closed
    branches: [main, development]

jobs:
  DeployPythonAPI:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      working-directory: python_api
      run: |
        python -m pip install -r requirements.txt

    - name: Generate config.json
      working-directory: python_api
      run: |
        cat <<EOF > .chalice/config.json
        {
          "version": "2.0",
          "app_name": "mycity-python-api",
          "environment_variables": {
            "USER_POOL_ID": "${{ secrets.USER_POOL_ID }}",
            "REST_API_AUTHORIZER": "${{ secrets.REST_API_AUTHORIZER }}",
            "USER_POOL_ARN": "${{ secrets.USER_POOL_ARN }}"
          },
          "stages": {
            "dev": {
              "api_gateway_stage": "dev",
              "environment_variables": {
                "API_ENV": "${{ secrets.API_DEV_STAGE_ENV }}"
              }
            },
            "prod": {
              "api_gateway_stage": "prod",
              "environment_variables": {
                "API_ENV": "${{ secrets.API_PROD_STAGE_ENV }}"
              }
            }
          }
        }
        EOF


    - name: Set Up AWS CLI
      working-directory: python_api
      run: |
        pip install awscli
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ secrets.AWS_REGION }}


    - name: Set Python API Stage Name
      working-directory: python_api
      run: |
          if [ ${{ github.base_ref }} == 'main' ]; then
            echo "API_STAGE_NAME=prod" >> $GITHUB_ENV
          elif [ ${{ github.base_ref }} == 'development' ]; then
            echo "API_STAGE_NAME=dev" >> $GITHUB_ENV
          else
            echo "No Chalice deployment for this branch"
            exit 0
          fi


    - name: Deploy Serverless Chalice App
      working-directory: python_api
      env:
        API_STAGE_NAME: ${{ env.API_STAGE_NAME }}
      run: |
          chalice deploy --stage ${{ env.API_STAGE_NAME }}


    - name: Update API Gateway
      working-directory: python_api/.chalice
      env:
        API_STAGE_NAME: ${{ env.API_STAGE_NAME }}
      run: python update_api_gateway.py


  DeployNodejsAPI:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install dependencies
      working-directory: nodejs_api
      run: |
        npm ci

    - name: Generate serverless.yml
      working-directory: nodejs_api
      run: |
        cat <<EOF > serverless.yml
        org: lanlords
        app: mycity
        service: mycity-nodejs-api
        provider:
          name: aws
          runtime: nodejs20.x
          timeout: 30
          vpc:
            securityGroupIds:
              - "${{ secrets.VPC_SECURITY_GROUP_ID }}"
            subnetIds:
              - "${{ secrets.VPC_SUBNET_ID }}"
          stage: ${opt:stage, 'dev'}
          region: "${{ secrets.AWS_REGION }}"
          deploymentBucket:
            name: ${self:custom.deploymentBuckets.${self:provider.stage}}
          iam:
            role: ${self:custom.lambdaFunctionRoleARNS.${self:provider.stage}}
          environment:
            API_ENV: ${self:provider.stage}
            USER_POOL_ARN: "${{ secrets.USER_POOL_ARN }}"
            USER_POOL_ID: "${{ secrets.USER_POOL_ID }}"
            S3_BUCKET_NAME: "${{ secrets.S3_BUCKET_NAME }}"
            REDIS_HOST: "${{ secrets.REDIS_HOST }}"
            REDIS_PORT: "${{ secrets.REDIS_PORT }}"
            WEB_SOCKET_URL: "${{ secrets.WEB_SOCKET_URL }}"
        functions:
          app:
            handler: dist/app.handler
            events:

                - http:
                    method: get
                    path: /tickets/fault-types


        custom:
          lambdaFunctionRoleARNS:
            dev: "${{ secrets.NODEJS_LAMBDA_ROLE_DEV }}"
            prod: "${{ secrets.NODEJS_LAMBDA_ROLE_PROD }}"
          lambdaFunctionNames:
            dev: mycity-nodejs-api-dev
            prod: mycity-nodejs-api-prod
          deploymentBuckets:
            dev: "${{ secrets.NODEJS_DEPLOYMENT_BUCKET_DEV }}"
            prod: "${{ secrets.NODEJS_DEPLOYMENT_BUCKET_PROD }}"
        resources:
          Resources:
            ApiGatewayRestApi:
              Type: AWS::ApiGateway::RestApi
              Properties:
                Name: mycity-nodejs-api-${self:provider.stage}
            ApiGatewayAuthorizer:
              Type: AWS::ApiGateway::Authorizer
              Properties:
                Name: "${{ secrets.NODEJS_AUTHORIZER_NAME }}"
                Type: COGNITO_USER_POOLS
                RestApiId:
                  Ref: ApiGatewayRestApi
                IdentitySource: method.request.header.Authorization
                ProviderARNs:
                  - "${{ secrets.USER_POOL_ARN }}"
        EOF

    - name: Set Up AWS CLI
      working-directory: nodejs_api
      run: |
        aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
        aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        aws configure set default.region "${{ secrets.AWS_REGION }}"

    - name: Set Nodejs Stage Name
      working-directory: nodejs_api
      run: |
        if [ ${{ github.base_ref }} == 'main' ]; then
          echo "STAGE=prod" >> $GITHUB_ENV
        elif [ ${{ github.base_ref }} == 'development' ]; then
          echo "STAGE=dev" >> $GITHUB_ENV
        else
          echo "No deployment for this branch"
          exit 0
        fi

    - name: Deploy Serverless Express App
      working-directory: nodejs_api
      env:
        SERVERLESS_ACCESS_KEY: "${{ secrets.SERVERLESS_ACCESS_KEY }}"  # Using the Serverless Access Key
      run: |
        npm run deploy -- --stage "${{ env.STAGE }}"
